// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  email         String     @unique
  name          String?
  emailVerified DateTime?
  image         String?
  role          String     @default("user")
  date          DateTime   @default(now())
  lastActive    DateTime   @default(now())
  blogLikes     String[]   @db.ObjectId @default([])
  comments      Comment[]  
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Blog {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  likes     Int
  en        Json
  fi        Json
  comments  Comment[]
}

model Project {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  video     String
  gitHub    String
  en        Json
  fi        Json
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  body      String
  date      DateTime @default(now()) 
  authorId  String    @db.ObjectId 
  blogId    String    @db.ObjectId
  replyId   String?   @db.ObjectId
  replies   Comment[] @relation("CommentReplies")
  parent    Comment?  @relation("CommentReplies", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  blog      Blog?     @relation(fields: [blogId], references: [id])
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}